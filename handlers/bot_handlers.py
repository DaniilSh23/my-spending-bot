import asyncio

import pyrogram
from pyrogram import Client, filters
from pyrogram.types import Message

from client_work import client_work
from filters.bot_filters import bot_manager_filter
from keyboards.bot_keyboards import ADMIN_KBRD, make_headpage_keyboard
from settings.config import WORKING_CLIENTS, MY_LOGGER, ADMIN_LOGIN, ADMIN_PASS
from utils.req_to_project_api import check_user_id, get_settings


@Client.on_message(filters.command('start'))
async def start_handler(client: pyrogram.Client, update: Message):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã start
    """
    MY_LOGGER.debug(f'–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ tlg_id –≤ –ë–î')
    check_usr_rslt = await check_user_id(
        tlg_id=update.from_user.id,
        tlg_username=update.from_user.username if update.from_user.username else None
    )

    MY_LOGGER.debug(f'–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤')
    get_adm_status, admins_lst = await get_settings(setting_key='bot_admin')
    if get_adm_status != 200:
        MY_LOGGER.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤. –û—Ç–≤–µ—Ç: {get_adm_status, admins_lst}')
    else:
        MY_LOGGER.debug(f'–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø–æ–ª—É—á–µ–Ω.')

    if check_usr_rslt[0] not in (201, 200):
        MY_LOGGER.error(f'–£ –±–æ—Ç–∞ —á—Ç–æ-—Ç–æ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ. –ü–æ–ª–æ–º–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —é–∑–µ—Ä–∞. '
                        f'–†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ check_user_id={check_usr_rslt}')
        await update.reply_text(text=f'üöß –£ –±–æ—Ç–∞ —á—Ç–æ-—Ç–æ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ...\n'
                                     f'üëå –ú—ã —É–∂–µ —Ä–µ—à–∞–µ–º —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É, —Å–∫–æ—Ä–æ –≤—Å—ë –±—É–¥–µ—Ç –æ–∫.')

        if get_adm_status == 200:
            MY_LOGGER.debug(f'–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞')
            for i_admin_id in admins_lst.get("result"):
                await client.send_message(
                    text=f'üõ∞–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º–∞‚ÄºÔ∏è\n–£ –±–æ—Ç–∞ —á—Ç–æ-—Ç–æ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ. –ü–æ–ª–æ–º–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —é–∑–µ—Ä–∞. '
                         f'–†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ check_user_id={check_usr_rslt}',
                    chat_id=int(i_admin_id),
                )
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif check_usr_rslt[0] == 201:
        MY_LOGGER.debug(f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tlg_id == {update.from_user.id}')
        msg_for_pin = await update.reply(
            text=f'üéâ<b>–†–∞–¥, —á—Ç–æ –í—ã —Å –Ω–∞–º–∏!</b>\n'
                 f'üìÜ–ù–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–æ—Å—Ç—É–ø–µ–Ω <b>–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥</b> {check_usr_rslt[1].get("trial_days")} –¥–Ω–µ–π.'
        )
        await msg_for_pin.pin(both_sides=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await update.reply_text(
        text=f'üó£Ô∏è <b>First Word Bot</b>\n'
             f'ü•á <i><b>"–ü–µ—Ä–≤—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª—É—á—à–∏–º"</b> - –∑–æ–ª–æ—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ –û–ª–∏–º–ø–∏–π—Å–∫–∏—Ö –∏–≥—Ä</i>\n\n'
             f'üí¨ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª–∏—Ç –í–∞–º <b>–ø–µ—Ä–≤—ã–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–≤–ª—è—Ç—å –ª—É—á—à–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b> '
             f'–ø–æ–¥ –Ω–æ–≤—ã–º –ø–æ—Å—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ.\n\nüîù –ê –∫–∞–∫ —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ? –î–µ–ª–æ –∑–∞ –í–∞–º–∏.\n'
             f'üì£ –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ö–æ—Ä–æ—à–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º, —á—Ç–æ–±—ã –∑–∞—è–≤–∏—Ç—å –æ —á—ë–º-–ª–∏–±–æ.\n\n'
             f'üë©üèº‚Äçüè´ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.',
        reply_markup=await make_headpage_keyboard(tlg_id=update.from_user.id)
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if get_adm_status == 200 and str(update.from_user.id) in admins_lst.get("result"):
        MY_LOGGER.debug(f'–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É')
        await update.reply_text(
            text=f'–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É: <code>{ADMIN_LOGIN}</code> | <code>{ADMIN_PASS}<code>',
            reply_markup=ADMIN_KBRD
        )


@Client.on_message(filters.command('start_client') & filters.private & bot_manager_filter)
async def start_thread_with_client(_, update):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º.
    –ê–∫–∫, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –±–æ—Ç–æ–º –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start_thread <–∏–º—è —Å–µ—Å—Å–∏–∏>
    """
    session_name = update.text.split()[1]
    MY_LOGGER.debug(f'–ü–æ–ª—É—á–µ–Ω –∞–ø–¥–µ–π—Ç –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ {session_name!r}')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π eventloop, —Å–æ–∑–¥–∞—ë–º task
    loop = asyncio.get_event_loop()
    task = loop.create_task(client_work(session_name))

    # –§–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞—Å–∫–∞
    stop_flag = asyncio.Event()

    # –ó–∞–ø–∏—Å—å —Ç–∞—Å–∫–∞ –∏ —Ñ–ª–∞–≥–∞ –≤ –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å (—Ñ–ª–∞–≥ –ø–æ–∫–∞ –æ–ø—É—â–µ–Ω)
    WORKING_CLIENTS[session_name] = [stop_flag, task]


@Client.on_message(filters.command('stop_client'))
async def stop_client(client, update):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏
    """
    session_name = update.text.split()[1]
    MY_LOGGER.debug(f'–ü–æ–ª—É—á–µ–Ω –∞–ø–¥–µ–π—Ç –ø–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ {session_name!r}')

    # –ü–æ–¥–Ω–∏–º–∞–µ–º —Å—Ç–æ–ø-—Ñ–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞—Å–∫–∞
    stop_flag = WORKING_CLIENTS[session_name][0]
    WORKING_CLIENTS[session_name][0] = stop_flag.set()

    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–∞—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ (—Ç–∞–º –≤ —Å–ª–æ–≤–∞—Ä–µ –ª–µ–∂–∏—Ç –æ–±—ä–µ–∫—Ç —Ç–∞—Å–∫–∞)
    await WORKING_CLIENTS[session_name][1]

    # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
    WORKING_CLIENTS.pop(session_name)
    MY_LOGGER.success(f'–ö–ª–∏–µ–Ω—Ç {session_name!r} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')


@Client.on_message()
async def test_handler(client, update):
    """
    –ü–æ–ª—É—á–∞–µ–º –∞–ø–¥–µ–π—Ç—ã
    """
    # MY_LOGGER.debug(f'–ü–æ–ª—É—á–µ–Ω –∞–ø–¥–µ–π—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ö—ç–Ω–¥–ª–µ—Ä–µ')
    # MY_LOGGER.debug(update)
